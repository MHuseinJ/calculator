// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/calc_engine/calc_engine.go

// Package calc_engine is a generated GoMock package.
package calc_engine

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCalculatorEngine is a mock of CalculatorEngine interface.
type MockCalculatorEngine struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorEngineMockRecorder
}

// MockCalculatorEngineMockRecorder is the mock recorder for MockCalculatorEngine.
type MockCalculatorEngineMockRecorder struct {
	mock *MockCalculatorEngine
}

// NewMockCalculatorEngine creates a new mock instance.
func NewMockCalculatorEngine(ctrl *gomock.Controller) *MockCalculatorEngine {
	mock := &MockCalculatorEngine{ctrl: ctrl}
	mock.recorder = &MockCalculatorEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatorEngine) EXPECT() *MockCalculatorEngineMockRecorder {
	return m.recorder
}

// ProceedInput mocks base method.
func (m *MockCalculatorEngine) ProceedInput(value float64, command string, arg float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProceedInput", value, command, arg)
	ret0, _ := ret[0].(float64)
	return ret0
}

// ProceedInput indicates an expected call of ProceedInput.
func (mr *MockCalculatorEngineMockRecorder) ProceedInput(value, command, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProceedInput", reflect.TypeOf((*MockCalculatorEngine)(nil).ProceedInput), value, command, arg)
}

// ReadInput mocks base method.
func (m *MockCalculatorEngine) ReadInput(input string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInput", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadInput indicates an expected call of ReadInput.
func (mr *MockCalculatorEngineMockRecorder) ReadInput(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInput", reflect.TypeOf((*MockCalculatorEngine)(nil).ReadInput), input)
}

// repeat mocks base method.
func (m *MockCalculatorEngine) repeat(result, input float64, commands []Command) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "repeat", result, input, commands)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// repeat indicates an expected call of repeat.
func (mr *MockCalculatorEngineMockRecorder) repeat(result, input, commands interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "repeat", reflect.TypeOf((*MockCalculatorEngine)(nil).repeat), result, input, commands)
}
