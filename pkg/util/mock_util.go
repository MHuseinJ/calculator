// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/util/util.go

// Package util is a generated GoMock package.
package util

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUtil is a mock of Util interface.
type MockUtil struct {
	ctrl     *gomock.Controller
	recorder *MockUtilMockRecorder
}

// MockUtilMockRecorder is the mock recorder for MockUtil.
type MockUtilMockRecorder struct {
	mock *MockUtil
}

// NewMockUtil creates a new mock instance.
func NewMockUtil(ctrl *gomock.Controller) *MockUtil {
	mock := &MockUtil{ctrl: ctrl}
	mock.recorder = &MockUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUtil) EXPECT() *MockUtilMockRecorder {
	return m.recorder
}

// Contains mocks base method.
func (m *MockUtil) Contains(s []string, str string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Contains", s, str)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Contains indicates an expected call of Contains.
func (mr *MockUtilMockRecorder) Contains(s, str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Contains", reflect.TypeOf((*MockUtil)(nil).Contains), s, str)
}

// ReadInputFloat mocks base method.
func (m *MockUtil) ReadInputFloat() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInputFloat")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputFloat indicates an expected call of ReadInputFloat.
func (mr *MockUtilMockRecorder) ReadInputFloat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputFloat", reflect.TypeOf((*MockUtil)(nil).ReadInputFloat))
}

// ReadInputString mocks base method.
func (m *MockUtil) ReadInputString() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadInputString")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadInputString indicates an expected call of ReadInputString.
func (mr *MockUtilMockRecorder) ReadInputString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadInputString", reflect.TypeOf((*MockUtil)(nil).ReadInputString))
}
